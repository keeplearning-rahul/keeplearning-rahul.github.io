{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    docker-notes.md # Other markdown pages, images and other files.\n</code></pre>"},{"location":"docker/docker-notes/","title":"Docker notes","text":"<p>A comprehensive guide to Docker, covering Docker fundamentals, Dockerfiles, container management, networking, volumes, and useful docker commands for containerizing applications.</p>"},{"location":"docker/docker-notes/#docker-basics","title":"Docker Basics","text":"<ul> <li>Docker is a platform for building, deploying, and running applications in containers.</li> <li>Containers are lightweight, standalone, and executable packages that contain everything needed to run an application, including code, runtime, system tools, and libraries.</li> <li>Docker uses a client-server architecture, with the Docker client communicating with the Docker daemon.</li> </ul>"},{"location":"docker/docker-notes/#docker-components","title":"Docker Components","text":"<ul> <li>Docker Images: Read-only templates used to create containers.</li> <li>Docker Containers: Running instances of Docker images.</li> <li>Docker Registry: A repository for storing and distributing Docker images.</li> <li>Docker Hub: A public registry maintained by Docker for hosting public and private Docker images.</li> </ul>"},{"location":"docker/docker-notes/#docker-architecture","title":"Docker Architecture","text":"<ul> <li>Docker Engine: The core component responsible for building and running Docker containers.</li> <li>Docker Daemon: The background service that manages containers, images, and networks.</li> <li>Docker Client: The command-line interface (CLI) tool used to interact with the Docker daemon.</li> </ul>"},{"location":"docker/docker-notes/#docker-networking","title":"Docker Networking","text":"<ul> <li>Docker supports different network drivers for container networking.</li> <li>The default network driver is the \"bridge\" network, which provides basic networking capabilities.</li> <li>Docker also supports user-defined networks, allowing containers to communicate across multiple Docker hosts.</li> </ul>"},{"location":"docker/docker-notes/#docker-volumes","title":"Docker Volumes","text":"<ul> <li>Docker volumes are used for persistent data storage.</li> <li>Volumes are directories or files on the host machine that are mounted into a container.</li> <li>Data stored in volumes persists even after the container is stopped or removed.</li> </ul>"},{"location":"docker/docker-notes/#docker-compose","title":"Docker Compose","text":"<ul> <li>Docker Compose is a tool for defining and running multi-container Docker applications.</li> <li>It uses a YAML file to define the services, networks, and volumes for the application.</li> <li>Docker Compose simplifies the process of starting, stopping, and rebuilding complex applications.</li> </ul>"},{"location":"docker/docker-notes/#docker-swarm","title":"Docker Swarm","text":"<ul> <li>Docker Swarm is a clustering and orchestration tool for Docker containers.</li> <li>It allows you to create and manage a cluster of Docker nodes (physical or virtual machines).</li> <li>Swarm provides features like load balancing, service discovery, and high availability.</li> </ul>"},{"location":"docker/docker-notes/#important-commands","title":"Important Commands","text":"Command Description Example <code>docker run &lt;image&gt;</code> Creates and runs a new container from an image <code>docker run nginx</code> <code>docker run --name &lt;name&gt; &lt;image&gt;</code> Assigns a name to the container <code>docker run --name my_nginx nginx</code> <code>docker run -d &lt;image&gt;</code> Runs the container in detached mode (in the background) <code>docker run -d nginx</code> <code>docker run -it &lt;image&gt; &lt;command&gt;</code> Runs the container with an interactive terminal <code>docker run -it ubuntu bash</code> <code>docker run -p &lt;host_port&gt;:&lt;container_port&gt; &lt;image&gt;</code> Maps a container's port to the host machine's port <code>docker run -p 8080:80 nginx</code> <code>docker run -v &lt;host_path&gt;:&lt;container_path&gt; &lt;image&gt;</code> Mounts a volume from the host machine to the container <code>docker run -v /data:/app/data nginx</code> <code>docker run &lt;image&gt;:&lt;tag&gt;</code> Runs an image with a specific tag <code>docker run nginx:latest</code> <code>docker start &lt;container_id/name&gt;</code> Starts a stopped container <code>docker start container_id</code> <code>docker stop &lt;container_id/name&gt;</code> Stops a running container <code>docker stop container_id</code> <code>docker rm &lt;container_id/name&gt;</code> Removes a stopped container <code>docker rm container_id</code> <code>docker rmi &lt;image&gt;</code> Removes an image <code>docker rmi nginx</code> <code>docker pull &lt;image&gt;</code> Pulls an image from a registry <code>docker pull nginx</code> <code>docker push &lt;registry&gt;/&lt;image&gt;</code> Pushes an image to a registry <code>docker push myregistry.com/nginx</code> <code>docker build -t &lt;image_name&gt; &lt;path&gt;</code> Builds an image from a Dockerfile <code>docker build -t myapp .</code> <code>docker logs &lt;container_id/name&gt;</code> Retrieves logs from a container <code>docker logs container_id</code> <code>docker exec -it &lt;container_id/name&gt; &lt;command&gt;</code> Runs a command in a running container <code>docker exec -it container_id bash</code> <code>docker ps</code> Lists running containers <code>docker ps</code> <code>docker ps -a</code> Lists all containers (running and stopped) <code>docker ps -a</code> <code>docker images</code> Lists available images <code>docker images</code> <code>docker network &lt;subcommand&gt;</code> Manages Docker networks <code>docker network ls</code> <code>docker volume &lt;subcommand&gt;</code> Manages Docker volumes <code>docker volume ls</code> <code>docker-compose &lt;subcommand&gt;</code> Runs multi-container applications with Docker Compose <code>docker-compose up</code>"}]}